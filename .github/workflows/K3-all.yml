#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
# Modified by liwenjie119 
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Thanks for below:
# https://github.com/liwenjie119/Actions-OpenWrt
# https://github.com/yangxu52/Phicomm-K2P-K3-OpenWrt-Firmware

name: K3-All-Build

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      #ssh:
      #  description: 'SSH connection to Actions'
      #  required: false
      #  default: 'false'
      devices:
        description: '["5.4Full","5.4Lite","5.10Full","5.10Lite","5.15Full","5.15Lite"]'
        default: '["5.4Full","5.4Lite","5.10Full","5.10Lite","5.15Full","5.15Lite"]'
      clean:
        description: 'clean ccache'
        default: 'false'
        
  schedule:
    - cron: 0 0 * * 6
  watch:
    types: started
  push:
    branches:
      - main
    paths:
      - '.github/workflows/K3-all.yml'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: PhicommK3/lede/feeds.conf.default
  #CONFIG_FILE: PhicommK3/lede/.config
  MOD_P1_SH: PhicommK3/lede/part1.sh
  MOD_P2_SH: PhicommK3/lede/part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_Fileio: true
  UPLOAD_Fichier: true
  UPLOAD_Musetransfer: true
  UPLOAD_Anonfile: true
  UPLOAD_DownloadGG: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  create-matrix:
    runs-on: ubuntu-latest
    name: Create Matrix
    steps:
      - name: Set Matrix
        id: set-matrix
        env:
          MATRIXS: ${{ github.event.inputs.devices }}
        run: |
          if [ -z $MATRIXS ]; then
            MATRIXS='["5.4Full","5.4Lite","5.10Full","5.10Lite","5.15Full","5.15Lite"]'
          fi
          echo "matrix=$MATRIXS" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }} 


  build:
    needs: create-matrix
    strategy:
      #max-parallel: 1
      fail-fast: false
      matrix:
        device: ${{ fromJSON(needs.create-matrix.outputs.matrix) }}

    runs-on: ubuntu-latest
    timeout-minutes: 1000

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 拉取源代码
      working-directory: /workdir
      run: |
        df -h
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        # 利用挂载在 /mnt/ 的 14G 额外空间:
        sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/feeds 
        ln -s /mnt/openwrt/dl /workdir/openwrt/dl
        ln -s /mnt/openwrt/feeds /workdir/openwrt/feeds
        # ln -s /mnt/openwrt/staging_dir ./staging_dir
        df -h

    - name: 尝试获取缓存
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: 'bcm53'
        prefix: ${{ github.workspace }}/openwrt

    - name: 加载自定义feeds文件
      run: |
        [ -e PhicommK3/lede/$FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $MOD_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$MOD_P1_SH

    - name: 更新feeds中描述内容
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装feeds中描述内容
      run: cd openwrt && ./scripts/feeds install -a
      
    - name: 加载自定义编译配置文件
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e ${{matrix.device}}.config ] && mv ${{matrix.device}}.config openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
#        sed -i 's/192.168.1.1/192.168.11.1/g' package/base-files/files/bin/config_generate
#        sed -i '/+kmod-dm/ s/$/ +libselinux +libsepol/' feeds/packages/utils/lvm2/Makefile
#        DateTime=`date -R`
#        sed -i "746 a \\\t\t<tr><td width="33%">编译时间<\/td><td>$DateTime<\/td><\/tr>" package/lean/autocore/files/x86/index.htm
#        sed -i "709 a \\\t\t<tr><td width="33%">编译时间<\/td><td>$DateTime<\/td><\/tr>" feeds/luci/modules/luci-mod-admin-full/luasrc/view/admin_status/index.htm
#        wget https://raw.githubusercontent.com/liwenjie119/packages/dev/net/openssh/patches/0001-fix-root-login.patch -P ./feeds/packages/net/openssh/patches


    - name: 下载编译所需依赖文件
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 核对空间占用
      if: (!cancelled())
      run: df -hT

    - name: 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 发布到cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
         
    - name: 发布到WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
          
    - name: 发布到Fileio
      id: Fileio
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_Fileio == 'true' && !cancelled()
      run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer fio -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee Fileio.log
          echo "::warning file=File.io::$(cat Fileio.log | grep https)"
          echo "url=$(cat Fileio.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
        
    - name: 发布到Fichier
      id: Fichier
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_Fichier == 'true' && !cancelled()
      run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer fic -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee Fichier.log
          echo "::warning file=1Fichier.com::$(cat Fichier.log | grep https)"
          echo "url=$(cat Fichier.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
        
    - name: 发布到Musetransfer
      id: Musetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_Musetransfer == 'true' && !cancelled()
      run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer muse -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee Musetransfer.log
          echo "::warning file=Musetransfer.com::$(cat Musetransfer.log | grep https)"
          echo "url=$(cat Musetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
        
    - name: 发布到Anonfile
      id: Anonfile
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_Anonfile == 'true' && !cancelled()
      run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer anon -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee Anonfile.log
          echo "::warning file=Anonfile.com::$(cat Anonfile.log | grep https)"
          echo "url=$(cat Anonfile.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
        
    - name: 发布到DownloadGG
      id: DownloadGG
      if: steps.organize.outputs.status == 'success' && env.DownloadGG == 'true' && !cancelled()
      run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer gg -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee DownloadGG.log
          echo "::warning file=download.gg::$(cat DownloadGG.log | grep https)"
          echo "url=$(cat DownloadGG.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT
        
    - name: 生成Release标识
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=K3oc-5.4-Full-$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [Wetransfer](${{ steps.wettransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_Fileio = true ] && echo "🔗 [Fileio](${{ steps.Fileio.outputs.url }})" >> release.txt
        [ $UPLOAD_Fichier = true ] && echo "🔗 [Fichier](${{ steps.Fichier.outputs.url }})" >> release.txt
        [ $UPLOAD_Musetransfer = true ] && echo "🔗 [Musetransfer](${{ steps.Musetransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_Anonfile = true ] && echo "🔗 [Anonfile](${{ steps.Anonfile.outputs.url }})" >> release.txt
        [ $UPLOAD_DownloadGG = true ] && echo "🔗 [DownloadGG](${{ steps.DownloadGG.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        echo "body=$(cat release.txt)" >> $GITHUB_OUTPUT


    - name: 发布到Release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 清理工作空间
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: 移除旧的Realeases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

##以下为P3TERX/Actions代码

##     - name: 发布到Artifact
##      if: github.event.inputs.ssh == 'false'
##       run: |
##         mkdir -p ./artifact/firmware
##         mkdir -p ./artifact/package
##         mkdir -p ./artifact/buildinfo
##         rm -rf $(find ./bin/targets/ -type d -name "packages")
##         cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
##         cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
##         cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

##    - name: 发布到Release
##      uses: softprops/action-gh-release@v1
##      if: steps.tag.outputs.status == 'success' && !cancelled()
##      env:
##        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
##      with:
##        tag_name: ${{ steps.tag.outputs.release_tag }}
##        body_path: release.txt
##        files: ${{ env.FIRMWARE }}/*
##
##    - name: 清理工作空间
##      uses: GitRML/delete-workflow-runs@main
##      with:
##        retain_days: 1
##        keep_minimum_runs: 3
##
##    - name: 移除旧的Realeases
##      uses: dev-drprasad/delete-older-releases@v0.1.0
##      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
##      with:
##        keep_latest: 10
##        delete_tags: true
##      env:
##        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
