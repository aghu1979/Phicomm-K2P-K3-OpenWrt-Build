#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: K3-5.15Lite

on:
  repository_dispatch:
  workflow_dispatch:


#   每周六早0点/UTC时间周五下午4点自动编译
  schedule:
    - cron: 0 0 * * 6
  watch:
   types: started
#   发布release的时候
  release:
    types: [published]

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: config/5.15/feeds.conf.default
  CONFIG_FILE: config/5.15/Lite.config
  DIY_P1_SH: config/5.15/diy1.sh
  DIY_P2_SH: config/5.15/diy2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_DOWNLOADGG: true
  UPLOAD_FILEIO: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 拉取源代码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 尝试获取缓存
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: 'bcm53'
        prefix: ${{ github.workspace }}/openwrt

    - name: 加载自定义feeds文件
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新feeds中描述内容
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装feeds中描述内容
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义编译配置文件
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载编译所需依赖文件
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 核对空间占用
      if: (!cancelled())
      run: df -hT

    - name: 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 发布到DOWNLOADGG
      id: DOWNLOADGG
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_DOWNLOADGG == 'true' && !cancelled()
      run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer gg ${FIRMWARE} 2>&1 | tee downloadGG.log
          echo "::warning file=download.gg::$(cat downloadGG.log | grep https)"
          echo "url=$(cat downloadGG.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: 发布到FILEIO
      id: FILEIO
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FILEIO == 'true' && !cancelled()
      run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer fio ${FIRMWARE} 2>&1 | tee Fileio.log
          echo "::warning file=File.io::$(cat Fileio.log | grep https)"
          echo "url=$(cat Fileio.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: 生成Release标识
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=K3-5.15Lite-$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_DOWNLOADGG = true ] && echo "🔗 [DOWNLOADGG](${{ steps.DOWNLOADGG.outputs.url }})" >> release.txt
        [ $UPLOAD_FILEIO = true ] && echo "🔗 [FILEIO](${{ steps.FILEIO.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
#        echo "body=$(cat release.txt)" >> $GITHUB_OUTPUT
#        echo "::set-output name=release_tag::K3-5.15Lite-$(date +"%Y.%m.%d-%H%M")"
#        echo "::set-output name=status::success"

##GitHub Action代码更新
    - name: 发布到Release
      uses: softprops/action-gh-release@v0.1.15
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 清理工作空间
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: 移除旧的Realeases
      uses: dev-drprasad/delete-older-releases@v0.2.1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

##GitHub Action旧代码
#~#    - name: 发布到Release
#~#      uses: softprops/action-gh-release@v1
#~#      if: steps.tag.outputs.status == 'success' && !cancelled()
#~#      env:
#~#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#~#      with:
#~#        tag_name: ${{ steps.tag.outputs.release_tag }}
#~#        body_path: release.txt
#~#        files: ${{ env.FIRMWARE }}/*
#~#
#~#    - name: 清理工作空间
#~#      uses: GitRML/delete-workflow-runs@main
#~#      with:
#~#        retain_days: 1
#~#        keep_minimum_runs: 3
#~#
#~#    - name: 移除旧的Realeases
#~#      uses: dev-drprasad/delete-older-releases@v0.1.0
#~#      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
#~#      with:
#~#        keep_latest: 5
#~#        delete_tags: true
#~#      env:
#~#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
